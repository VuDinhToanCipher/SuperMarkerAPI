// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SuperMarkerAPI.Data;

#nullable disable

namespace SuperMarkerAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250510154752_UpdateDatabase")]
    partial class UpdateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SuperMarkerAPI.Models.ProductEntity", b =>
                {
                    b.Property<Guid>("IDProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameProduct")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("nvarchar(130)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("Decimal(18, 2)");

                    b.Property<Guid>("ProductTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductUnit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IDProduct");

                    b.HasIndex("ProductTypeID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SuperMarkerAPI.Models.ProductTypeEntity", b =>
                {
                    b.Property<Guid>("IDType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDType");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.EmployeeEntity", b =>
                {
                    b.Property<Guid>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeID");

                    b.HasIndex("PositionID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.ImportDetailEntity", b =>
                {
                    b.Property<Guid>("ImportDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDProduct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImportReceiptID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductEntityIDProduct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("ImportDetailID");

                    b.HasIndex("IDProduct");

                    b.HasIndex("ImportReceiptID");

                    b.HasIndex("ProductEntityIDProduct");

                    b.ToTable("ImportDetail");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.ImportReceiptEntity", b =>
                {
                    b.Property<Guid>("ImportReceiptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SupplierID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImportReceiptID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("SupplierID");

                    b.ToTable("ImportReceipt");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.PermissionEntity", b =>
                {
                    b.Property<Guid>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionID");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.PositionEntity", b =>
                {
                    b.Property<Guid>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("positionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionID");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.Position_Permission_Entity", b =>
                {
                    b.Property<Guid>("PermissionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionID", "PositionID");

                    b.HasIndex("PositionID");

                    b.ToTable("PositionPermissions");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.SupplierEntity", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierPhoneNummber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.Supplier_Product_Entity", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SupplierId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("supplier_Product");
                });

            modelBuilder.Entity("SuperMarkerAPI.Models.ProductEntity", b =>
                {
                    b.HasOne("SuperMarkerAPI.Models.ProductTypeEntity", "productType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("productType");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("SuperMarket.Core.Entities.PositionEntity", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.ImportDetailEntity", b =>
                {
                    b.HasOne("SuperMarkerAPI.Models.ProductEntity", "Products")
                        .WithMany()
                        .HasForeignKey("IDProduct")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SuperMarket.Core.Entities.ImportReceiptEntity", "ImportReceipt")
                        .WithMany("ImportDetail")
                        .HasForeignKey("ImportReceiptID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SuperMarkerAPI.Models.ProductEntity", null)
                        .WithMany("importDetailEntities")
                        .HasForeignKey("ProductEntityIDProduct");

                    b.Navigation("ImportReceipt");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.ImportReceiptEntity", b =>
                {
                    b.HasOne("SuperMarket.Core.Entities.EmployeeEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SuperMarket.Core.Entities.SupplierEntity", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.Position_Permission_Entity", b =>
                {
                    b.HasOne("SuperMarket.Core.Entities.PermissionEntity", "PermissionEntity")
                        .WithMany("Position")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperMarket.Core.Entities.PositionEntity", "PositionEntity")
                        .WithMany("Permission")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionEntity");

                    b.Navigation("PositionEntity");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.Supplier_Product_Entity", b =>
                {
                    b.HasOne("SuperMarkerAPI.Models.ProductEntity", "ProductEntity")
                        .WithMany("Suppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperMarket.Core.Entities.SupplierEntity", "SupplierEntity")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductEntity");

                    b.Navigation("SupplierEntity");
                });

            modelBuilder.Entity("SuperMarkerAPI.Models.ProductEntity", b =>
                {
                    b.Navigation("Suppliers");

                    b.Navigation("importDetailEntities");
                });

            modelBuilder.Entity("SuperMarkerAPI.Models.ProductTypeEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.ImportReceiptEntity", b =>
                {
                    b.Navigation("ImportDetail");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.PermissionEntity", b =>
                {
                    b.Navigation("Position");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.PositionEntity", b =>
                {
                    b.Navigation("Permission");
                });

            modelBuilder.Entity("SuperMarket.Core.Entities.SupplierEntity", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
